%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: SCSS
scope: source.scss
version: 2

extends: Packages/CSS/CSS.sublime-syntax

file_extensions:
  - scss

###############################################################################

variables:

  # CSS overrides

  ident_start: (?:{{nmstart}}|#{)

  property_or_selector_begin: (?={{ident_begin}}|{{selector_start}})

  selector_start: '[[:alpha:].:#%&*\[{{combinator_char}}]'
  selector_end: (?=[;{}])

  tag_name_begin: (?=[[:alpha:]]|#{)

  # SCSS variables

  scss_ident: '[[:alnum:]_-][\w-]*'

###############################################################################

contexts:

###[ CSS ]#####################################################################

  stylesheet:
    - include: header
    - include: comments
    - include: properties-or-selectors
    - include: property-lists
    - include: scss-declarations
    - include: scss-at-rules
    - include: at-rules
    - include: rule-terminators

###[ Yekyll front matter ]#####################################################

  header:
    - match: '^---$'
      scope: meta.frontmatter.jekyll punctuation.section.frontmatter.begin.jekyll
      embed: scope:source.yaml
      embed_scope: meta.frontmatter.jekyll source.yaml
      escape: '^---$'
      escape_captures:
        0: meta.frontmatter.jekyll punctuation.section.frontmatter.end.jekyll

###[ CSS COMMENTS ]############################################################

  comments:
    - meta_append: true
    - include: sassdoc-comments
    - include: scss-line-comments

  block-comment-body:
    - meta_append: true
    - include: scss-string-interpolation

###[ SassDoc COMMENTS ]###########################################################

  sassdoc-comments:
    - match: /{3}
      scope: punctuation.definition.comment.sassdoc.scss
      push: sassdoc-comments-body

  sassdoc-comments-body:
    - meta_scope: comment.line.double-slash.scss comment.line.documentation.sassdoc.scss
    - include: Packages/Markdown/Markdown.sublime-syntax#bold
    - include: Packages/Markdown/Markdown.sublime-syntax#italic
    - include: Packages/Markdown/Markdown.sublime-syntax#code-spans
    # @TODO maybe consider markdown inline links, images
    - match: \@\w+(?=\s|$)
      scope: entity.name.tag.documentation.sassdoc.scss
    - match: \n
      pop: 1

###[ SCSS COMMENTS ]###########################################################

  scss-line-comments:
    - match: /{2}
      scope: punctuation.definition.comment.scss
      push: scss-line-comments-body

  scss-line-comments-body:
    - meta_scope: comment.line.double-slash.scss
    - match: \n
      pop: 1

###[ CSS PROPERTIES OR SELECTORS ]#############################################

  properties-or-selectors:
    - match: '{{property_or_selector_begin}}'
      branch_point: property-or-selector
      branch:
        - maybe-property
        - selector-body

  maybe-property:
    - include: comments
    - include: property-end
    - include: property-identifiers

    # otherwise it is part of a selector
    - match: ''
      fail: property-or-selector

  property-end:
    # property values are followed/terminated by one of ; ) }
    - match: (?=[;)}])
      pop: 1

  selector-body:
    - meta_prepend: true
    - include: scss-interpolation
    - include: scss-placeholder-selector
    - include: scss-bem-selector

###[ CSS PROPERTY LISTS ]######################################################

  property-list-body:
    - meta_scope: meta.property-list.css meta.block.css
    - include: block-end
    - include: stylesheet

###[ CSS MEDIA QUERIES ]#######################################################

  media-query-group-body:
    - meta_append: true
    - include: scss-expression

###[ CSS VALUE EXPRESSIONS ]###################################################

  values:
    - include: value-prototype
    - include: comma-delimiters
    - include: arithmetic-operators
    - include: important-operators
    - include: vendor-prefixes
    - include: builtin-functions
    - include: color-values
    - include: line-name-lists
    - include: unicode-ranges
    - include: numeric-constants
    - include: quoted-strings
    - include: none-constants
    - include: scss-expression-basic ## handle scss expressions before native functions etc.
    - include: constants-or-functions
    - include: illegal-groups

  value-prototype:
    - meta_append: true
    - include: scss-default-operators
    - include: scss-global-operators

  at-keyframe-identifier:
    - meta_prepend: true
    - include: scss-interpolation

  font-family-value-content:
    - meta_prepend: true
    - include: scss-expression-basic

  font-property-value-content:
    - meta_prepend: true
    - include: scss-expression-basic

###[ CSS FUNCTION ARGUMENTS ]##################################################

  function-arguments-prototype:
    - meta_append: true
    - include: scss-expression-basic

###[ CSS IDENTIFIERS ]#########################################################

  identifier-content:
    - meta_prepend: true
    - include: scss-interpolation

###[ CSS STRINGS WITH INTERPOLATION ]##########################################

  single-quoted-string-body:
    - meta_prepend: true
    - include: scss-string-interpolation

  double-quoted-string-body:
    - meta_prepend: true
    - include: scss-string-interpolation

  single-quoted-url-body:
    - meta_prepend: true
    - include: scss-string-interpolation

  double-quoted-url-body:
    - meta_prepend: true
    - include: scss-string-interpolation

  unquoted-urls:
    - meta_prepend: true
    - include: scss-string-interpolation

###[ SCSS DEFAULT/GLOBAL VALUES ]##############################################

  scss-default-operators:
    - match: \!\s*(?i:default){{break}}
      scope: keyword.other.default.scss

  scss-global-operators:
    - match: \!\s*(?i:global){{break}}
      scope: keyword.other.global.scss

###[ SCSS SELECTORS ]##########################################################

  scss-placeholder-selector:
    - match: \%
      scope: entity.other.attribute-name.class.css punctuation.definition.entity.placeholder.scss
      # has same basic properties as a classname
      push: selector-class-identifier

  scss-bem-selector:
    - match: (\&)([-_]+({{ident}}|(?=#{)))
      # &--bem_ish selectors
      captures:
        1: variable.language.parent.css
        2: entity.other.attribute-name.css

###[ SCSS EXPRESSIONS ]########################################################

  scss-expression-basic:
    # for use in CSS contexts
    - include: comments
    - include: important-operators
    - include: scss-declarations
    - include: scss-variables
    - include: scss-operators
    - include: sass-namespaced-functions
    - include: scss-expression-or-map

  scss-expression:
    # for use in SCSS contexts where we try to "guess" more types of values
    - include: scss-expression-basic

    # and most normal css values
    # - include: comma-delimiters
    # - include: arithmetic-operators
    # - include: vendor-prefixes
    - include: builtin-functions
    - include: color-values
    # - include: line-name-lists
    - include: unicode-ranges
    - include: numeric-constants
    - include: quoted-strings
    # - include: none-constants
    # - include: constants-or-functions
    # - include: illegal-groups

    # other values only mean something after compiling to css,
    # we can't always predict what just based on what it looks like
    - match: '{{ident}}'
      scope: meta.generic-name.scss

###[ SCSS INTERPOLATION ]######################################################

  scss-interpolation:
    - match: (#)({)
      captures:
        1: punctuation.definition.variable.scss
        2: punctuation.section.interpolation.begin.scss
      push: scss-interpolation-body

  scss-interpolation-body:
    - meta_scope: meta.interpolation.scss
    - match: \}
      scope: punctuation.section.interpolation.end.scss
      pop: 1
    - include: scss-expression

  scss-string-interpolation:
    - match: (#)({)
      captures:
        1: punctuation.definition.variable.scss
        2: punctuation.section.interpolation.begin.scss
      push: scss-string-interpolation-body

  scss-string-interpolation-body:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.scss
    - match: \}
      scope: punctuation.section.interpolation.end.scss
      pop: 1
    - include: scss-expression

###[ SCSS VARS ]###############################################################

  scss-variables:
    - match: '(({{ident}})(\.))?(\$)([a-zA-Z0-9_-][\w-]*)'
      scope: variable.other.scss
      captures:
        2: entity.name.namespace.scss
        3: punctuation.separator.namespace.scss
        4: punctuation.definition.variable.scss
    - include: scss-interpolation

###[ SCSS MAPS OR GROUPS ]#####################################################

  scss-expression-or-map:
    - match: '(?=\()'
      branch_point: expression-or-map
      branch:
        - scss-expression-group
        - scss-map

  scss-expression-group:
    - match: '\('
      captures:
        0: punctuation.section.group.begin.scss
      push:
        - meta_scope: meta.group.expression.scss
        - match: '\)'
          scope: punctuation.section.group.end.scss
          pop: 2
        - match: (?=:)
          fail: expression-or-map
        - include: scss-expression

  scss-map:
    - match: '\('
      captures:
        0: punctuation.section.group.begin.scss
      push:
        - meta_scope: meta.group.scss meta.map.arguments.scss
        - match: '\)'
          scope: punctuation.section.group.end.scss
          pop: 2
        - match: '({{ident}})'
          captures:
            1: variable.parameter.scss
        - match: ':'
          scope: punctuation.separator.key-value.css
          push:
            - match: ','
              scope: punctuation.separator.sequence.css
              pop: 1
            - include: comments
            - include: terminator-pop
            - include: values
        - include: scss-variables
        - include: quoted-strings

###[ SCSS DECLARATIONS ]#######################################################

  scss-declarations:
    - match: (((\$){{scss_ident}})\s*)(:)
      captures:
        1: meta.declaration.identifier.scss
        2: variable.other.scss
        3: punctuation.definition.variable.scss
        4: meta.declaration.scss punctuation.separator.key-value.css
      push: scss-declaration-value

  scss-declaration-value:
    - meta_content_scope: meta.declaration.value.scss
    - include: values

###[ SCSS FUNCTIONS ]##########################################################

  sass-namespaced-functions:
    - match: '\b(?!var)(({{ident}})(\.))?([a-z_-]+)(?=\()'
      scope: support.function.scss
      captures:
        2: entity.name.namespace.scss
        3: punctuation.separator.namespace.scss
      push:
        - meta_scope: meta.function-call.identifier.css variable.function.css
        - match: (?=\()
          set:
            - other-function-arguments-list-body
            - function-arguments-list-begin

###[ SCSS OPERATORS ]##########################################################

  scss-operators:
    - match: /|\*|\-\-|\-|\+\+|\+|~
      scope: keyword.operator.arithmetic.scss
    - match: $|%|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\|\||\?\:|%=|\+=|\-=|&=
      scope: keyword.operator.comparison.scss
    - match: \bnot\b|\bor\b|\band\b|\bwhen\b
      scope: keyword.operator.logical.scss
    - match: (?:\s*)\b(not|or|and)(?=\s)
      captures:
        1: keyword.operator.logical.scss
    - match: \.{3}
      scope: keyword.operator.variadic.scss
    - match: \btrue\b
      scope: constant.language.boolean.true.scss
    - match: \bfalse\b
      scope: constant.language.boolean.false.scss
    - match: \bnull\b
      scope: constant.language.null.scss

###[ SCSS @ Rules ]############################################################

  scss-at-rules:
    - match: '(@)(each){{break}}'
      captures:
        0: keyword.control.flow.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.each.scss
        - include: scss-variables
        - include: comma-delimiters
        - include: terminator-pop
        - match: \b(in){{break}}
          scope: keyword.operator.scss
          push:
            - include: terminator-pop
            - include: comments
            - include: comma-delimiters
            - include: var-function
            - include: scss-expression
    - match: '(@)(for){{break}}'
      captures:
        0: keyword.control.flow.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.for.scss
        - include: values
        - include: terminator-pop
        - match: (?:\s*)\b(from|to|through)(?=\s)
          captures:
            1: keyword.operator.scss
    - match: '(@)(while){{break}}'
      captures:
        0: keyword.control.flow.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.while.scss
        - include: scss-expression
        - include: terminator-pop
    - match: '(@)(if|else if|else){{break}}'
      captures:
        0: keyword.control.flow.conditional.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.conditional.scss
        - include: terminator-pop
        - include: values
    - match: '(@)(error){{break}}'
      captures:
        0: keyword.control.at-rule.error.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.scss
        - include: terminator-pop
        - include: scss-expression
        - include: quoted-strings
    - match: '(@)(warn){{break}}'
      captures:
        0: keyword.control.at-rule.warn.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.scss
        - include: terminator-pop
        - include: scss-expression
        - include: quoted-strings
    - match: '(@)(debug){{break}}'
      captures:
        0: keyword.control.at-rule.debugger.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.scss
        - include: terminator-pop
        - include: values
    - match: '(@)(at-root){{break}}'
      captures:
        0: keyword.control.directive.at-root.scss
        1: punctuation.definition.keyword.scss
    - match: '(@)(extend){{break}}'
      captures:
        0: keyword.control.directive.extend.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.extend.scss
        - include: terminator-pop
        - include: selectors
    - match: '((@)(mixin|function))\s+([\w-]+)'
      captures:
        1: keyword.control.directive.scss
        2: punctuation.definition.keyword.scss
        4: entity.name.function.scss
      push:
        - meta_scope: meta.function.declaration.scss
        - include: terminator-pop
        - match: '\('
          scope: punctuation.section.group.begin.scss
          push:
            - meta_scope: meta.function.parameters.scss
            - match: '\)'
              scope: punctuation.section.group.end.scss
              pop: 1
            - include: comma-delimiters
            - match: '(\$)([a-zA-Z0-9_-][\w-]*)'
              scope: variable.parameter.scss
              captures:
                1: punctuation.definition.variable.scss
              push:
                - match: '(?=[,\)])'
                  pop: 1
                - match: ':'
                  scope: punctuation.separator.key-value.css
                - match: '\b(false|true|null)\b'
                  scope: constant.language.scss
                - include: property-value-content
    - match: '((@)(include))\s+((([a-z]+)(\.))?([\w-]+))'
      captures:
        1: keyword.control.directive.scss
        2: punctuation.definition.keyword.scss
        4: variable.function.scss
        6: entity.name.namespace.scss
        7: punctuation.separator.namespace.scss
      push:
        - meta_scope: meta.function-call.scss
        - include: terminator-pop
        - match: '\('
          scope: punctuation.section.group.begin.scss
          push:
            - meta_scope: meta.function-call.arguments.scss
            - match: '\)'
              scope: punctuation.section.group.end.scss
              pop: 2
            - include: comments
            - include: comma-delimiters
            - match: ':'
              scope: punctuation.separator.key-value.css
            - include: values
            - match: '{{ident}}'
              scope: meta.generic-name.scss
    - include: scss-at-content
    - include: scss-at-forward
    - include: scss-at-return
    - include: scss-at-use

###[ SCSS CONTENT AT-RULE ]####################################################

  scss-at-content:
    # https://sass-lang.com/documentation/at-rules/mixin/#content-blocks
    - match: (@)content{{break}}
      scope: meta.placeholder.scss keyword.control.directive.content.scss
      captures:
        1: punctuation.definition.keyword.scss
      push:
        - scss-at-content-meta
        - scss-at-content-argument-list

  scss-at-content-meta:
    - meta_include_prototype: false
    - meta_scope: meta.at-rule.content.scss
    - include: immediately-pop

  scss-at-content-argument-list:
    - meta_include_prototype: false
    - meta_content_scope: meta.placeholder.scss
    - match: \(
      scope: punctuation.section.group.begin.scss
      set: scss-at-content-argument-list-body
    - include: else-pop

  scss-at-content-argument-list-body:
    - meta_scope: meta.placeholder.arguments.scss meta.group.scss
    - match: \)
      scope: punctuation.section.group.end.scss
      pop: 1
    - match: \.{3}
      scope: keyword.operator.variadic.scss
    - include: scss-arguments
    - include: values

###[ SCSS CONTROL FLOW AT-RULE ]###############################################

  scss-at-return:
    - match: (@)return{{break}}
      scope: keyword.control.flow.return.scss
      captures:
        1: punctuation.definition.keyword.scss
      push: scss-at-return-value

  scss-at-return-value:
    - meta_scope: meta.at-rule.return.scss
    - include: values

###[ SCSS FORWARD/USE AT-RULE ]################################################

  scss-at-forward:
    # https://sass-lang.com/documentation/at-rules/forward/
    - match: (@)forward{{break}}
      scope: keyword.control.directive.forward.scss
      captures:
        1: punctuation.definition.keyword.scss
      push:
        - scss-at-forward-meta
        - scss-moulde-with
        - scss-moulde-visibility
        - scss-module-as
        - maybe-quoted-url

  scss-at-forward-meta:
    - meta_include_prototype: false
    - meta_scope: meta.at-rule.forward.scss
    - meta_content_scope: meta.module.scss
    - include: immediately-pop

  scss-at-use:
    # https://sass-lang.com/documentation/at-rules/use/
    - match: (@)use{{break}}
      scope: keyword.control.directive.use.scss
      captures:
        1: punctuation.definition.keyword.scss
      push:
        - scss-at-use-meta
        - scss-moulde-with
        - scss-module-as
        - maybe-quoted-url

  scss-at-use-meta:
    - meta_include_prototype: false
    - meta_scope: meta.at-rule.use.scss
    - meta_content_scope: meta.module.scss
    - include: immediately-pop

  scss-module-as:
    - match: as{{break}}
      scope: keyword.operator.assignment.as.scss
      set: scss-module-as-value
    - include: comments
    - include: else-pop

  scss-module-as-value:
    - clear_scopes: 1
    - meta_scope: meta.module.alias.scss
    - match: '{{ident}}(\*)?'
      scope: meta.generic-name.scss
      captures:
        1: constant.other.wildcard.asterisk.scss
      pop: 1
    - match: \*
      scope: constant.other.wildcard.asterisk.scss
      pop: 1
    - include: comments
    - include: else-pop

  scss-moulde-visibility:
    - match: hide{{break}}
      scope: keyword.control.visibility.hide.scss
      push: scss-module-visibility-value
    - match: show{{break}}
      scope: keyword.control.visibility.show.scss
      push: scss-module-visibility-value
    - include: comments
    - include: else-pop

  scss-module-visibility-value:
    - clear_scopes: 1
    - meta_scope: meta.module.visibility.scss
    - match: (?=(?:hide|show|with){{break}})
      pop: 1
    - include: comma-delimiters
    - include: scss-expression
    - match: '{{ident}}'
      scope: meta.generic-name.scss
    - include: else-pop

  scss-moulde-with:
    - match: with{{break}}
      scope: keyword.control.with.scss
      set: scss-module-arguments-list
    - include: comments
    - include: else-pop

  scss-module-arguments-list:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.group.begin.scss
      set: scss-module-arguments-list-body
    - include: comments
    - include: else-pop

  scss-module-arguments-list-body:
    - clear_scopes: 1
    - meta_scope: meta.module.arguments.scss meta.group.scss
    - match: \)
      scope: punctuation.section.group.end.scss
      pop: 1
    - match: \.{3}
      scope: keyword.operator.variadic.scss
    - include: scss-arguments
    - include: values

###[ SCSS ARGUMENTS ]##########################################################

  scss-arguments:
    - match: (((\$){{scss_ident}})\s*)(:)
      captures:
        1: meta.argument.identifier.scss
        2: variable.parameter.scss
        3: punctuation.definition.variable.scss
        4: meta.argument.scss punctuation.separator.key-value.css
      push: scss-argument-value

  scss-argument-value:
    - meta_content_scope: meta.argument.value.scss
    - match: ','
      scope: punctuation.separator.sequence.css
      pop: 1
    - include: values

###[ SCSS CONSTANTS ]##########################################################

  maybe-quoted-url:
    - match: \"
      scope:
        meta.string.css string.quoted.double.css
        punctuation.definition.string.begin.css
      set: double-quoted-url-body
    - match: \'
      scope:
        meta.string.css string.quoted.single.css
        punctuation.definition.string.begin.css
      set: single-quoted-url-body
    - include: comments
    - include: else-pop
