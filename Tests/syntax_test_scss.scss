// SYNTAX TEST "Packages/Sass/Syntaxes/SCSS.sublime-syntax"

//=============================================================================
// Comments
// https://sass-lang.com/documentation/syntax/comments/
//=============================================================================
// This comment won't be included in the CSS
// <- comment.line.double-slash.scss punctuation.definition.comment.scss
 // <- comment.line.double-slash.scss punctuation.definition.comment.scss
//^^^^^^^^^ comment.line.double-slash.scss - punctuation

/** But this comment will, except in compressed mode.
// <- comment.block.css punctuation.definition.comment.begin.css
//^ comment.block.css punctuation.definition.comment.begin.css
// ^ comment.block.css - punctuation

 * It can also contain interpolation:
 * 1 + 1 = #{1 + 1}
//         ^^^^^^^^ meta.interpolation.scss - comment
//             ^ keyword.operator

 * { item_description }
 // <- comment.block.css punctuation.definition.comment.css

 */
// <- comment.block.css - punctuation
 // <- comment.block.css punctuation.definition.comment.end.css
//^ comment.block.css punctuation.definition.comment.end.css
// ^ - comment


  button
  , button          // perhaps you want to type button:hover
// ^^^^^^^^^^^^^^^^^ meta.selector.css - comment
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.selector.css comment.line.double-slash.scss

  , selector-ish    /* with comments at the end */
// ^^^^^^^^^^^^^^^^^ meta.selector.css - comment
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.selector.css comment.block.css

  , button:         // or maybe button::before
// ^^^^^^^^^^^^^^^^^ meta.selector.css - comment
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.selector.css comment.line.double-slash.scss
  { // ; comment
// <- meta.selector.css
//^^ meta.property-list.css meta.block.css - comment
//  ^^^^^^^^^^^^^ meta.property-list.css meta.block.css comment.line.double-slash.scss
//  ^^ punctuation.definition.comment.scss

    color: /**/ // ; comment
//        ^^^^^^^^^^^^^^^^^^^ meta.property-list.css meta.block.css meta.property-value.css
//         ^^ comment.block.css punctuation.definition.comment.begin.css
//           ^^ comment.block.css punctuation.definition.comment.end.css
//              ^^^^^^^^^^^^^ comment.line.double-slash.scss
//              ^^ punctuation.definition.comment.scss
        darken(blue /**/) ; //comment
//     ^^^^^^^^^^^^^^^^^^^ meta.property-list.css meta.block.css meta.property-value.css
//                  ^^^^ comment.block.css
//                        ^^ meta.property-list.css meta.block.css - comment
//                          ^^^^^^^^^^ meta.property-list.css meta.block.css comment.line.double-slash.scss

  } // comment
// <- meta.property-list.css meta.block.css
//^ meta.property-list.css meta.block.css punctuation.section.block.end.css
// ^ - meta.property-list - meta.block - punctuation
//  ^^^^^^^^^^^ comment.line.double-slash.scss

//=============================================================================
// SassDoc Comments
// https://sass-lang.com/documentation/syntax/comments/#documentation-comments
//=============================================================================
/// SassDoc comments are **Markdown**, we only support some _mininal styling_
//                       ^^^^^^^^^^^^ markup.bold
//                                   ^ - markup.bold
//                                                          ^^^^^^^^^^^^^^^^^ markup.italic
//                                                                           ^ - markup.italic
/// Computes an exponent.
// <- comment.line.double-slash.scss punctuation.definition.comment.sassdoc.scss
//^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.scss comment.line.documentation.sassdoc.scss
/// @param {number} $base
///   The number to multiply by itself.
/// @param {integer (unitless)} $exponent
//  ^^^^^^ source.scss comment comment.line.documentation.sassdoc.scss entity.name.tag.documentation.sassdoc.scss
///   The number of `$base`s to multiply together.
//                  ^^^^^^^ markup.raw.inline
//                         ^ - markup.raw.inline
/// @return {number} `$base` to the power of `$exponent`.
//  ^^^^^^^ source.scss comment comment.line.documentation.sassdoc.scss entity.name.tag.documentation.sassdoc.scss

//=============================================================================
// Special Functions: url()
// https://sass-lang.com/documentation/syntax/special-functions/
// - element() is experimental and not yet implemented in any browser.
// - expression() and functions beginning with progid: are legacy Internet Explorer features and not implemented here.
//=============================================================================
@font-face {
    // This is parsed as a normal function call that takes a quoted string.
    src: url("#{$roboto-font-path}/Roboto-Thin.woff2") format("woff2");
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.font-face.css meta.property-list.css meta.block.css meta.property-value.css
//       ^^^ meta.function-call.identifier.css support.function.url.css
//          ^ meta.function-call.arguments.css meta.group.css punctuation.section.group.begin.css
//           ^ meta.function-call.arguments.css meta.group.css meta.string.css string.quoted.double.css punctuation.definition.string.begin.css - meta.interpolation
//            ^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css meta.path.url.css meta.string.css meta.interpolation.scss - string
//                                ^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css meta.string.css string.quoted.double.css - meta.interpolation
//                                                   ^ meta.function-call.arguments.css meta.group.css punctuation.section.group.end.css - meta.interpolation
//                                                    ^ meta.property-value.css - meta.function-call - meta.interpolation
//                                                     ^^^^^^ meta.function-call.identifier.css support.function.font-face.css - meta.interpolation
//                                                           ^^^^^^^^^ meta.function-call.arguments.css meta.group.css - meta.interpolation
//              ^^^^^^^^^^^^^^^^^ variable.other.scss
//              ^ punctuation.definition.variable.scss

    // This is parsed as a normal function call that takes an arithmetic expression.
    src: url($roboto-font-path + "/Roboto-Light.woff2") format("woff2");

    // This is parsed as an interpolated special function.
/* TODO: unsure how this should be handled, */
    src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format("woff2");
//           ^^^^^^^^^^^^^^^^^^^^ meta.interpolation.scss
//                               ^ -meta.interpolation.scss
//             ^^^^^^^^^^^^^^^^^ variable.other.scss
//             ^ punctuation.definition.variable.scss
}

//=============================================================================
// Property Declarations
// https://sass-lang.com/documentation/style-rules/declarations/
//=============================================================================
.circle {
  $size: 100px;
//^^^^^ variable.other.scss
//^ punctuation.definition.variable.scss
//     ^ punctuation.separator.key-value.css
//       ^^^^^ meta.declaration.value.scss
//            ^ - meta.declaration.value.scss
//       ^^^^^ meta.number.integer.decimal.css
//       ^^^ constant.numeric.value.css
//          ^^ constant.numeric.suffix.css
//            ^ punctuation.terminator
  width: $size;
// ^^^^^^^^^^^^ meta.property-list
//       ^^^^^ meta.property-value
// ^^^^ meta.property-name
//     ^ punctuation.separator.key-value.css
//       ^^^^^ variable.other.scss
//            ^ punctuation.terminator
  height: $size;
  border-radius: $size * 0.5;
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.property-list
// ^^^^^^^^^^^^ meta.property-name
//              ^^^^^^^^^^^^ meta.property-value
//             ^ punctuation.separator.key-value.css
//               ^^^^^ variable.other.scss
//                     ^ keyword.operator.arithmetic
//                       ^ meta.number.float.decimal.css constant.numeric.value.css
//                          ^ punctuation.terminator
}

//=============================================================================
// Interpolation
// https://sass-lang.com/documentation/style-rules/declarations/#interpolation
//=============================================================================
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
//  ^^^^^^^^^^^^^^^^^^^^^^^^ meta.property-name.css support.type.property-name.css
//                           ^^^^^^^ meta.property-value.css
//  ^ - meta.interpolation
//   ^^^^^^^^^^ meta.interpolation.scss
//             ^ - meta.interpolation
//              ^^^^^^^^^^^^ meta.interpolation.scss
//                          ^ - meta.interpolation
//   ^ punctuation.definition.variable.scss
//    ^ punctuation.section.interpolation.begin.scss
//     ^^^^^^^ variable.other.scss
//            ^ punctuation.section.interpolation.end.scss
//              ^ punctuation.definition.variable.scss
//               ^ punctuation.section.interpolation.begin.scss
//                ^^^^^^^^^ variable.other.scss
//                         ^ punctuation.section.interpolation.end.scss
//                          ^ punctuation.separator.key-value.css
//                            ^^^^^^ variable.other.scss
//                                  ^ punctuation.terminator.rule.css
  }
  #{$property}: $value;
//^^^^^^^^^^^^ meta.property-name.css support.type.property-name.css meta.interpolation.scss
//            ^ - meta.property-name - meta.interpolation
//^ punctuation.definition.variable.scss
// ^ punctuation.section.interpolation.begin.scss
//  ^^^^^^^^^ variable.other.scss
//           ^ punctuation.section.interpolation.end.scss
}

.gray {
  @include prefix(filter, grayscale(50%), moz webkit);
}

//=============================================================================
// Nesting
// TODO: this is currently unimplemented,
// as it would explode the complexity of the selector/property branching.
// https://sass-lang.com/documentation/style-rules/declarations/#nesting
//=============================================================================
.enlarge {
  font-size: 14px;
  transition: blue {
    property: font-size;
    duration: 4s;
    delay: 2s;
  }

  &:hover { font-size: 36px; }
}

.info-page {
  margin: auto {
    bottom: 10px;
    top: 2px;
  }
}

//=============================================================================
// Custom Properties
// https://sass-lang.com/documentation/style-rules/declarations/#custom-properties
//=============================================================================
$primary: #81899b;
$accent: #302e24;
$warn: #dfa612;

:root {
  --primary: #{$primary};
//^^^^^^^^^ meta.property-name.css entity.other.custom-property.css
//         ^ - meta.property-name - meta.property-value
//          ^ meta.property-value.css - meta.interpolation
//           ^^^^^^^^^^^ meta.property-value.css meta.interpolation.scss
//                      ^ - meta.property-value - meta.interpolation
//         ^ punctuation.separator.key-value.css
//           ^ punctuation.definition.variable.scss
//            ^ punctuation.section.interpolation.begin.scss
//             ^^^^^^^^ variable.other.scss
//                     ^ punctuation.section.interpolation.end.scss
//                      ^ punctuation.terminator.rule.css

  --#{$accent}: #{$accent};
//^^^^^^^^^^^^ meta.property-name.css entity.other.custom-property.css
//^^ - meta.interpolation
//  ^^^^^^^^^^ meta.interpolation.scss
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^^^^^ variable.other.scss
//           ^ punctuation.section.interpolation.end.scss
//            ^ - meta.property-name - meta.property-value
//             ^ meta.property-value.css - meta.interpolation
//              ^^^^^^^^^^ meta.property-value.css meta.interpolation.scss
//                        ^ - meta.property-value - meta.interpolation
//            ^ punctuation.separator.key-value.css
//              ^ punctuation.definition.variable.scss
//               ^ punctuation.section.interpolation.begin.scss
//                ^^^^^^^ variable.other.scss
//                       ^ punctuation.section.interpolation.end.scss
//                        ^ punctuation.terminator.rule.css

  // Even though this looks like a Sass variable, it's valid CSS so it's not
  // evaluated.
  --consumed-by-js: $primary;
}

//=============================================================================
// Parent Selector
// https://sass-lang.com/documentation/style-rules/parent-selector/
//=============================================================================
.alert {
  // The parent selector can be used to add pseudo-classes to the outer
  // selector.
  &:hover {
//^ variable.language.parent.css
    font-weight: bold;
  }

  // It can also be used to style the outer selector in a certain context, such
  // as a body set to use a right-to-left language.
  [dir=rtl] & {
//          ^ variable.language.parent.css
    margin-left: 0;
  }

  // You can even use it as an argument to pseudo-class selectors.
  :not(&) {
//     ^ variable.language.parent.css
    opacity: 0.8;
  }
}

.accordion {
  max-width: 600px;

  &__copy {
//^ variable.language.parent.css
    padding: 1rem 1.5rem 2rem 1.5rem;

    &--open {
      display: block;
    }
  }
}

.test & {}
// <- meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css
//^^^^^^ meta.selector.css
//    ^ variable.language.parent.css
.test:not() & {}
// <- meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css
//^^^^^^^^^^^^ meta.selector.css
//          ^ variable.language.parent.css

//=============================================================================
// Bem-ish selectors with interpolation
// https://sass-lang.com/documentation/style-rules/parent-selector/#adding-suffixes
//=============================================================================
  &--test {}
//^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^ entity.other.attribute-name.css

  &__test {}
//^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^ entity.other.attribute-name.css

  &--#{$test} {}
//^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^ entity.other.attribute-name.css
//   ^^^^^^^^ meta.interpolation.scss
//   ^ punctuation.definition.variable.scss
//    ^ punctuation.section.interpolation.begin.scss
//     ^^^^^ variable.other.scss
//          ^ punctuation.section.interpolation.end.scss

  &__#{$test} {}
//^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^ entity.other.attribute-name.css
//   ^^^^^^^^ meta.interpolation.scss
//   ^ punctuation.definition.variable.scss
//    ^ punctuation.section.interpolation.begin.scss
//     ^^^^^ variable.other.scss
//          ^ punctuation.section.interpolation.end.scss

  &__foo#{$bar} {}
//^^^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^^^ entity.other.attribute-name.css
//      ^^^^^^^ meta.interpolation.scss
//      ^ punctuation.definition.variable.scss
//       ^ punctuation.section.interpolation.begin.scss
//        ^^^^ variable.other.scss
//            ^ punctuation.section.interpolation.end.scss

  &-#{$foobar} {}
//^^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^^ entity.other.attribute-name.css
//  ^^^^^^^^^^ meta.interpolation.scss
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^^^^^ variable.other.scss
//           ^ punctuation.section.interpolation.end.scss

  &_#{$foobar} {}
//^^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^^ entity.other.attribute-name.css
//  ^^^^^^^^^^ meta.interpolation.scss
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^^^^^ variable.other.scss
//           ^ punctuation.section.interpolation.end.scss

  &-#{$foo}bar {}
//^^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^^ entity.other.attribute-name.css
//  ^^^^^^^ meta.interpolation.scss
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^^ variable.other.scss
//        ^ punctuation.section.interpolation.end.scss

  &_#{$foo}bar {}
//^^^^^^^^^^^^^ meta.selector.css
//^ variable.language.parent.css
// ^^^^^^^^^^^ entity.other.attribute-name.css
//  ^^^^^^^ meta.interpolation.scss
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^^ variable.other.scss
//        ^ punctuation.section.interpolation.end.scss

  #{$test}--test {}
//^^^^^^^^ meta.selector.css entity.name.tag.other.css meta.interpolation.scss
//        ^^^^^^ meta.selector.css entity.name.tag.other.css
//              ^ meta.selector.css - entity.name

  .#{$test}--test {}
//^ meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css - meta.interpolation
// ^^^^^^^^ meta.selector.css entity.other.attribute-name.class.css meta.interpolation.scss
//         ^^^^^^ meta.selector.css entity.other.attribute-name.class.css - meta.interpolation
//               ^ meta.selector.css - entity.name

  #{$test}--#{$test} {}
//^^^^^^^^ meta.selector.css entity.name.tag.other.css meta.interpolation.scss
//        ^^ meta.selector.css entity.name.tag.other.css
//          ^^^^^^^^ meta.selector.css entity.name.tag.other.css meta.interpolation.scss
//                  ^ meta.selector.css - entity.name

  .#{$test}--#{$test} {}
//^ meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css - meta.interpolation
// ^^^^^^^^ meta.selector.css entity.other.attribute-name.class.css meta.interpolation.scss
//         ^^ meta.selector.css entity.other.attribute-name.class.css - meta.interpolation
//           ^^^^^^^^ meta.selector.css entity.other.attribute-name.class.css meta.interpolation.scss
//                   ^ meta.selector.css - entity.name

  #{$test}__test {}
//^^^^^^^^ meta.selector.css entity.name.tag.other.css meta.interpolation.scss
//        ^^^^^^ meta.selector.css entity.name.tag.other.css
//              ^ meta.selector.css - entity.name

  .#{$test}__test {}
//^ meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css - meta.interpolation
// ^^^^^^^^ meta.selector.css entity.other.attribute-name.class.css meta.interpolation.scss
//         ^^^^^^ meta.selector.css entity.other.attribute-name.class.css - meta.interpolation
//               ^ meta.selector.css - entity.name

  #{$test}__#{$test} {}
//^^^^^^^^ meta.selector.css entity.name.tag.other.css meta.interpolation.scss
//        ^^ meta.selector.css entity.name.tag.other.css
//          ^^^^^^^^ meta.selector.css entity.name.tag.other.css meta.interpolation.scss
//                  ^ meta.selector.css - entity.name

  .#{$test}__#{$test} {}
//^ meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css - meta.interpolation
// ^^^^^^^^ meta.selector.css entity.other.attribute-name.class.css meta.interpolation.scss
//         ^^ meta.selector.css entity.other.attribute-name.class.css - meta.interpolation
//           ^^^^^^^^ meta.selector.css entity.other.attribute-name.class.css meta.interpolation.scss
//                   ^ meta.selector.css - entity.name

//=============================================================================
// Placeholder Selectors
// https://sass-lang.com/documentation/style-rules/placeholder-selectors/
//=============================================================================
.alert:hover, %strong-alert {
//            ^^^^^^^^^^^^^ entity.other.attribute-name.class.css
//            ^ punctuation.definition.entity.placeholder.scss
  font-weight: bold;
}

%strong-alert:hover {
//^^^^^^^^^^^ entity.other.attribute-name.class.css
// <- punctuation.definition.entity.placeholder.scss
  color: red;
}

%toolbelt {
//^^^^^^^ entity.other.attribute-name.class.css
// <- punctuation.definition.entity.placeholder.scss
  &:hover { border: 2px rgba(#000, .5) solid; }
}

.action-buttons {
  @extend %toolbelt;
//        ^^^^^^^^^ entity.other.attribute-name.class.css
//        ^ punctuation.definition.entity.placeholder.scss
  color: #4285f4;
}

  %foo#{$bar} {}
//^^^^^^^^^^^^ meta.selector.css
//^^^^ entity.other.attribute-name.class.css - meta.interpolation
//^ punctuation.definition.entity.placeholder.scss
//    ^^^^^^^ entity.other.attribute-name.class.css meta.interpolation.scss
//    ^ punctuation.definition.variable.scss
//     ^ punctuation.section.interpolation.begin.scss
//      ^^^^ entity.other.attribute-name.class.css meta.interpolation.scss variable.other.scss
//          ^ punctuation.section.interpolation.end.scss

  %foo#{$bar}baz {}
//^^^^^^^^^^^^^^^ meta.selector.css
//^^^^ entity.other.attribute-name.class.css - meta.interpolation
//^ punctuation.definition.entity.placeholder.scss
//    ^^^^^^^ entity.other.attribute-name.class.css meta.interpolation.scss
//    ^ punctuation.definition.variable.scss
//     ^ punctuation.section.interpolation.begin.scss
//      ^^^^ entity.other.attribute-name.class.css meta.interpolation.scss variable.other.scss
//          ^ punctuation.section.interpolation.end.scss
//           ^^^ entity.other.attribute-name.class.css - meta.interpolation

  %#{$bar}baz {}
//^^^^^^^^^^^^ meta.selector.css
//^ entity.other.attribute-name.class.css punctuation.definition.entity.placeholder.scss
// ^^^^^^^ entity.other.attribute-name.class.css meta.interpolation.scss
// ^ punctuation.definition.variable.scss
//  ^ punctuation.section.interpolation.begin.scss
//   ^^^^ entity.other.attribute-name.class.css meta.interpolation.scss variable.other.scss
//       ^ punctuation.section.interpolation.end.scss
//        ^^^ entity.other.attribute-name.class.css - meta.interpolation

//=============================================================================
// Variables
// https://sass-lang.com/documentation/variables/
//=============================================================================
$base-color: #c6538c;
// ^^^^^^^^ meta.declaration.identifier.scss variable.other.scss
//         ^ - variable.other.scss
//<-        punctuation.definition.variable.scss
$border-dark: rgba($base-color, 0.88);
// ^^^^^^^^^ meta.declaration.identifier.scss variable.other.scss
//            ^^^^^^^^^^^^^^^^^^^^^^^ meta.declaration.value.scss
//                                   ^ - meta.declaration.value.scss
//          ^ - variable.other.scss
//<-         punctuation.definition.variable.scss
//                 ^^^^^^^^^^^ variable.other.scss
//                            ^ - variable.other.scss
//                 ^           punctuation.definition.variable.scss

.alert {
  border: 1px solid $border-dark;
}

//=============================================================================
// Default Values
// https://sass-lang.com/documentation/variables/#default-values
//=============================================================================
$black: #000 !important;
//           ^^^^^^^^^^ keyword.other.important.css
$black: #000 !default;
//           ^^^^^^^^ keyword.other.default.scss
$border-radius: 0.25rem !default;
//                      ^^^^^^^^ keyword.other.default.scss
$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default;

code {
  border-radius: $border-radius;
  box-shadow: $box-shadow;
}

//=============================================================================
// Shadowing (Global Values)
// https://sass-lang.com/documentation/variables/#shadowing
//=============================================================================
$variable: first global value;

.content {
  $variable: second global value !global;
//                               ^^^^^^^ keyword.other.global.scss
  value: $variable;
}

//=============================================================================
// Interpolation
// https://sass-lang.com/documentation/interpolation/
//=============================================================================
@mixin corner-icon($name, $top-or-bottom, $left-or-right) {
  .icon-#{$name} {
//^^^^^^         entity.other.attribute-name.class.css
//       ^^^^^^^ meta.interpolation.scss
//        ^^^^^  variable.other.scss
    background-image: url("/icons/#{$name}.svg");
//                                ^^^^^^^^ meta.interpolation.scss
    position: absolute;
    #{$top-or-bottom}: 0;
//  ^^^^^^^^^^^^^^^^^ meta.interpolation.scss
    #{$left-or-right}: 0;
//  ^^^^^^^^^^^^^^^^^ meta.interpolation.scss
  }
}

@mixin inline-animation($duration) {
  $name: inline-#{unique-id()};
//              ^^^^^^^^^^^^^^ meta.interpolation.scss

// FYI: meta.at-rule.keyframe.css does not apply to the interpolated bit due to clear_scopes
  @keyframes #{$name} {
// ^^^^^^^^^^          meta.at-rule.keyframe.css
// ^^^^^^^^^           keyword.control.directive.css
//           ^^^^^^^^  meta.interpolation.scss
    @content;
//  ^^^^^^^^ meta.at-rule.content.scss meta.placeholder.scss keyword.control.directive.content.scss
  }

  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: infinite;
}

//=============================================================================
// At-Rules: use
// https://sass-lang.com/documentation/at-rules/use/
//=============================================================================
@use 'foundation/code';
@use 'foundation/lists';
// <- meta.at-rule.use.scss keyword.control.directive.use.scss punctuation.definition.keyword.scss
//^^ meta.at-rule.use.scss - meta.module
//  ^^^^^^^^^^^^^^^^^^^ meta.at-rule.use.scss meta.module.scss
//                     ^ - meta.at-rule - meta.module
//^^ keyword.control.directive.use.scss
//   ^^^^^^^^^^^^^^^^^^ meta.string.css string.quoted.single.css
//                     ^ punctuation.terminator.rule.css

// https://sass-lang.com/documentation/at-rules/use/#choosing-a-namespace
@use "src/corners" as c;
// <- meta.at-rule.use.scss keyword.control.directive.use.scss punctuation.definition.keyword.scss
//^^ meta.at-rule.use.scss - meta.module
//  ^^^^^^^^^^^^^^^ meta.at-rule.use.scss meta.module.scss
//                 ^^^^ meta.at-rule.use.scss meta.module.alias.scss
//                     ^ - meta.at-rule - meta.module
//^^ keyword.control.directive.use.scss
//   ^^^^^^^^^^^^^ meta.string.css string.quoted.double.css
//                 ^^ keyword.operator.assignment.as.scss
//                    ^ meta.generic-name.scss
//                     ^ punctuation.terminator.rule.css

// https://sass-lang.com/documentation/at-rules/use/#configuration
@use 'library' with (
// <- meta.at-rule.use.scss keyword.control.directive.use.scss punctuation.definition.keyword.scss
//^^ meta.at-rule.use.scss - meta.module
//  ^^^^^^^^^^^^^^^^ meta.at-rule.use.scss meta.module.scss
//                  ^^ meta.at-rule.use.scss meta.module.arguments.scss meta.group.scss
//^^ keyword.control.directive.use.scss
//   ^^^^^^^^^ meta.string.css string.quoted.single.css
//             ^^^^ keyword.control.with.scss
//                  ^ punctuation.section.group.begin.scss
  $black: #222,
//^^^^^^^^^^^^^^ meta.at-rule.use.scss meta.module.arguments.scss meta.group.scss
//^^^^^^ meta.argument.identifier.scss
//      ^ meta.argument.scss
//       ^^^^^ meta.argument.value.scss
//            ^ - meta.argument
//^^^^^^ variable.parameter.scss
//      ^ punctuation.separator.key-value.css
//        ^^^^ constant.other.color
//            ^ punctuation.separator.sequence.css

  $border-radius: 0.1rem,
//^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.use.scss meta.module.arguments.scss meta.group.scss
//^^^^^^^^^^^^^^ meta.argument.identifier.scss variable.parameter.scss
//              ^ meta.argument.scss punctuation.separator.key-value.css
//               ^^^^^^^ meta.argument.value.scss
//                      ^ - meta.argument

  $border-radius: 0.1rem
//^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.use.scss meta.module.arguments.scss meta.group.scss
//^^^^^^^^^^^^^^ meta.argument.identifier.scss variable.parameter.scss
//              ^ meta.argument.scss punctuation.separator.key-value.css
//               ^^^^^^^^ meta.argument.value.scss
);
// <- meta.at-rule.use.scss meta.module.arguments.scss meta.group.scss punctuation.section.group.end.scss
 // <- punctuation.terminator.rule.css - meta.at-rule

@use 'library' with  ;
//^^^^^^^^^^^^^^^^^^^ meta.at-rule.use.scss
//                   ^ punctuation.terminator.rule.css - meta.at-rule

@use 'library' with ( ;
//^^^^^^^^^^^^^^^^^^^^ meta.at-rule.use.scss
//                    ^ punctuation.terminator.rule.css - meta.at-rule

@use 'library' with ) ;
//^^^^^^^^^^^^^^^^^^ meta.at-rule.use.scss
//                  ^^^ - meta.at-rule

//=============================================================================
// At-Rules: forward
// https://sass-lang.com/documentation/at-rules/forward/
//=============================================================================
@forward
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^^ meta.at-rule.forward.scss
//^^^^^^ keyword.control.directive.forward.scss

@forward "src/list";
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^ meta.at-rule.forward.scss - meta.module
//      ^ meta.at-rule.forward.scss meta.module.scss - meta.string - string - keyword
//       ^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss meta.string.css string.quoted.double.css
//                 ^ - meta.at-rule - meta.module
//^^^^^^ keyword.control.directive.forward.scss
//       ^ punctuation.definition.string.begin.css
//           ^ punctuation.separator.path.css
//                ^ punctuation.definition.string.end.css
//                 ^ punctuation.terminator.rule.css

// https://sass-lang.com/documentation/at-rules/forward/#adding-a-prefix
@forward "src/list" as list-*;
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^ meta.at-rule.forward.scss - meta.module
//      ^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                  ^^^^^^^^^ meta.at-rule.forward.scss meta.module.alias.scss
//                           ^ - meta.at-rule - meta.module
//^^^^^^ keyword.control.directive.forward.scss
//       ^^^^^^^^^^ meta.string.css string.quoted.double.css
//                  ^^ keyword.operator.assignment.as.scss
//                     ^^^^^^ meta.generic-name.scss
//                          ^ constant.other.wildcard.asterisk.scss
//                           ^ punctuation.terminator.rule.css

@forward "src/list" as *;
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^ meta.at-rule.forward.scss - meta.module
//      ^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                  ^^^^ meta.at-rule.forward.scss meta.module.alias.scss
//                      ^ - meta.at-rule - meta.module
//^^^^^^ keyword.control.directive.forward.scss
//       ^^^^^^^^^^ meta.string.css string.quoted.double.css
//                  ^^ keyword.operator.assignment.as.scss
//                     ^ constant.other.wildcard.asterisk.scss
//                      ^ punctuation.terminator.rule.css

// https://sass-lang.com/documentation/at-rules/forward/#controlling-visibility
@forward "src/list" hide list-reset, $horizontal-list-gap show other;
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^ meta.at-rule.forward.scss - meta.module
//      ^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.visibility.scss
//                                                                  ^ - meta.at-rule - meta.module
//^^^^^^ keyword.control.directive.forward.scss
//       ^^^^^^^^^^ meta.string.css string.quoted.double.css
//                  ^^^^ keyword.control.visibility.hide.scss
//                       ^^^^^^^^^^ meta.generic-name.scss
//                                 ^ punctuation.separator.sequence.css
//                                   ^^^^^^^^^^^^^^^^^^^^ variable.other.scss
//                                                        ^^^^ keyword.control.visibility.show.scss
//                                                             ^^^^^ meta.generic-name.scss
//                                                                  ^ punctuation.terminator.rule.css

// https://sass-lang.com/documentation/at-rules/forward/#configuring-modules
@forward 'library' with (
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^^ - meta.at-rule meta.at-rule - meta.module meta.module
//^^^^^^ meta.at-rule.forward.scss
//      ^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                      ^^ meta.at-rule.forward.scss meta.module.arguments.scss
//^^^^^^ keyword.control.directive.forward.scss
//       ^^^^^^^^^ string.quoted.single.css
//                 ^^^^ keyword.control.with.scss
//                      ^ punctuation.section.group.begin.scss

  $black: #222 !default,
// <- meta.at-rule.forward.scss meta.module.arguments.scss meta.group.scss
//^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.arguments.scss meta.group.scss
//^^^^^^ meta.argument.identifier.scss variable.parameter.scss
//      ^ meta.argument.scss punctuation.separator.key-value.css
//       ^^^^^^^^^^^^^^ meta.argument.value.scss
//        ^^^^ constant.other.color.rgb-value.css
//             ^^^^^^^^ keyword.other.default.scss
//                     ^ punctuation.separator.sequence.css

  $border-radius: 0.1rem !default
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.arguments.scss meta.group.scss
// <- meta.at-rule.forward.scss meta.module.arguments.scss meta.group.scss
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.arguments.scss meta.group.scss
//^^^^^^^^^^^^^^ meta.argument.identifier.scss variable.parameter.scss
//              ^ meta.argument.scss punctuation.separator.key-value.css
//               ^^^^^^^^^^^^^^^^^ meta.argument.value.scss
//                ^^^^^^ meta.number.float.decimal.css
//                       ^^^^^^^^ keyword.other.default.scss
);
// <- meta.at-rule.forward.scss meta.module.arguments.scss meta.group.scss punctuation.section.group.end.scss
 // <- punctuation.terminator.rule.css - meta.at-rule - meta.module

@forward 'library' with  ;
//^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss
//                       ^ punctuation.terminator.rule.css - meta.at-rule

@forward 'library' with ( ;
//^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss
//                        ^ punctuation.terminator.rule.css - meta.at-rule

@forward 'library' with ) ;
//^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss
//                      ^^^ - meta.at-rule

@forward "src/list" as list-* hide foo, $bar show baz with ($color: red);
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - meta.at-rule meta.at-rule - meta.module meta.module
//^^^^^^ meta.at-rule.forward.scss
//      ^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                  ^^^^^^^^^ meta.at-rule.forward.scss meta.module.alias.scss
//                            ^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.visibility.scss
//                                                    ^^^^^ meta.at-rule.forward.scss meta.module.scss
//                                                         ^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.arguments.scss
//^^^^^^ keyword.control.directive.forward.scss
//       ^^^^^^^^^^ string.quoted.double.css
//                  ^^ keyword.operator.assignment.as.scss
//                     ^^^^^^ meta.generic-name.scss
//                            ^^^^ keyword.control.visibility.hide.scss
//                                 ^^^ meta.generic-name.scss
//                                    ^ punctuation.separator.sequence.css
//                                      ^^^^ variable.other.scss
//                                           ^^^^ keyword.control.visibility.show.scss
//                                                ^^^ meta.generic-name.scss
//                                                    ^^^^ keyword.control.with.scss
//                                                         ^ punctuation.section.group.begin.scss
//                                                          ^^^^^^ variable.parameter.scss
//                                                                ^ punctuation.separator.key-value.css
//                                                                  ^^^ support.constant.color.w3c.standard.css
//                                                                     ^ punctuation.section.group.end.scss
//                                                                      ^ punctuation.terminator.rule.css

// with (...) is the very last expression
// trailing `hide` and `show` expressions are illegal scss syntax,
// but they are scoped as meta.selector to resume after incomplete statements
@forward "src/list" as list-* with ($color: red) hide foo, $bar show baz;
// <- meta.at-rule.forward.scss keyword.control.directive.forward.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - meta.at-rule meta.at-rule - meta.module meta.module
//                                               ^^^^^^^^^^^^^^^^^^^^^^^ meta.selector.css - meta.at-rule - module
//^^^^^^ meta.at-rule.forward.scss
//      ^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                  ^^^^^^^^^ meta.at-rule.forward.scss meta.module.alias.scss
//                           ^^^^^^ meta.at-rule.forward.scss meta.module.scss
//                                 ^^^^^^^^^^^^^ meta.at-rule.forward.scss meta.module.arguments.scss
//^^^^^^ keyword.control.directive.forward.scss
//       ^^^^^^^^^^ string.quoted.double.css
//                  ^^ keyword.operator.assignment.as.scss
//                     ^^^^^^ meta.generic-name.scss
//                            ^^^^ keyword.control.with.scss
//                                 ^ punctuation.section.group.begin.scss
//                                  ^^^^^^ variable.parameter.scss
//                                        ^ punctuation.separator.key-value.css
//                                          ^^^ support.constant.color.w3c.standard.css
//                                             ^ punctuation.section.group.end.scss
//                                               ^^^^ entity.name.tag.other.css
//                                                    ^^^^ entity.name.tag.other.css

//=============================================================================
// At-Rules: import
// Deprecated, thus left unimplemented (CSS highlightling still applies)
// https://sass-lang.com/documentation/at-rules/import/
//=============================================================================
@import 'foundation/code', 'foundation/lists';

//=============================================================================
// At-Rules: mixin and include
// https://sass-lang.com/documentation/at-rules/mixin/
//=============================================================================
@mixin reset-list {
// <- meta.at-rule.mixin.scss meta.mixin.scss keyword.control.directive.mixin.scss punctuation.definition.keyword.scss
//^^^^^ meta.at-rule.mixin.scss meta.mixin.scss
//     ^^^^^^^^^^^ meta.at-rule.mixin.scss meta.mixin.identifier.scss
//                ^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^ keyword.control.directive.mixin.scss
//     ^^^^^^^^^^ entity.name.mixin.scss
//                ^ punctuation.section.block.begin.css

  margin: 0;
// <- meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^^^ meta.block.css meta.property-name.css
//       ^^ meta.property-value.css
  padding: 0;
  list-style: none;
}
// <- meta.at-rule.mixin.scss meta.property-list.css meta.block.css punctuation.section.block.end.css
 // <- - meta.at-rule - meta.property-list - meta.block

@mixin horizontal-list {
  @include reset-list;
//^^^^^^^^^ meta.at-rule.include.scss - meta.mixin
//         ^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.scss
//^ punctuation.definition.keyword.scss
//^^^^^^^^ keyword.control.directive.include.scss
//         ^^^^^^^^^^ variable.other.mixin.scss
  li {
    display: inline-block;
    margin: {
      left: -2px;
      right: 2em;
    }
  }
}

nav ul {
  @include horizontal-list;
//^^^^^^^^^ meta.at-rule.include.scss - meta.mixin
//         ^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.scss
//^ punctuation.definition.keyword.scss
//^^^^^^^^ keyword.control.directive.include.scss
//         ^^^^^^^^^^^^^^^ variable.other.mixin.scss
}

//=============================================================================
// At-Rules: mixin arguments
// https://sass-lang.com/documentation/at-rules/mixin/#arguments
//=============================================================================
@mixin rtl($property, $ltr-value, $rtl-value) {
// <- meta.at-rule.mixin.scss meta.mixin.scss keyword.control.directive.mixin.scss punctuation.definition.keyword.scss
//^^^^^ meta.at-rule.mixin.scss meta.mixin.scss
//     ^^^ meta.at-rule.mixin.scss meta.mixin.identifier.scss
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.mixin.parameters.scss meta.group.scss
//                                           ^ meta.at-rule.mixin.scss - meta.block
//                                            ^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^ keyword.control.directive.mixin.scss
//     ^^^ entity.name.mixin.scss
//        ^ punctuation.section.group.begin.scss
//         ^^^^^^^^^ variable.parameter.scss
//                  ^ punctuation.separator.sequence.css
//                    ^^^^^^^^^^ variable.parameter.scss
//                              ^ punctuation.separator.sequence.css
//                                ^^^^^^^^^^ variable.parameter.scss
//                                          ^ punctuation.section.group.end.scss
//                                            ^ punctuation.section.block.begin.css
  #{$property}: $ltr-value;
// <- meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^^^^^^^^^ meta.property-name.css support.type.property-name.css meta.interpolation.scss
//            ^ - meta.property-name - meta.interpolation - meta.property-value
//             ^^^^^^^^^^^ meta.property-value.css
//                        ^ - meta.property-value
//^ punctuation.definition.variable.scss
// ^ punctuation.section.interpolation.begin.scss
//  ^^^^^^^^^ variable.other.scss
//           ^ punctuation.section.interpolation.end.scss
//            ^ punctuation.separator.key-value.css
//              ^^^^^^^^^^ variable.other.scss
//              ^ punctuation.definition.variable.scss
//                        ^ punctuation.terminator.rule.css

  [dir=rtl] & {
    #{$property}: $rtl-value;
// <- meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css meta.property-list.css meta.block.css
//  ^^^^^^^^^^^^ meta.property-name.css support.type.property-name.css meta.interpolation.scss
//              ^ - meta.property-name - meta.interpolation - meta.property-value
//               ^^^^^^^^^^^ meta.property-value.css
//                          ^ - meta.property-value
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^^^^^^^ variable.other.scss
//             ^ punctuation.section.interpolation.end.scss
//              ^ punctuation.separator.key-value.css
//                ^^^^^^^^^^ variable.other.scss
//                ^ punctuation.definition.variable.scss
//                          ^ punctuation.terminator.rule.css
  }
}

.sidebar {
  @include rtl(float, left, right);
//^^^^^^^^^ meta.at-rule.include.scss - meta.mixin
//         ^^^ meta.at-rule.include.scss meta.mixin.scss
//            ^^^^^^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//                                ^ - meta.at-rule - meta.mixin - meta.group
//^ punctuation.definition.keyword.scss
//^^^^^^^^ keyword.control.directive.include.scss
//         ^^^ variable.other.mixin.scss
//            ^ punctuation.section.group.begin.scss
//             ^^^^^ support.constant.property-value.css
//                  ^ punctuation.separator.sequence.css
//                    ^^^^ support.constant.property-value.css
//                        ^ punctuation.separator.sequence.css
//                               ^ punctuation.section.group.end.scss
}

//=============================================================================
// At-Rules: mixin optional arguments
// https://sass-lang.com/documentation/at-rules/mixin/#optional-arguments
//=============================================================================
@mixin replace-text($image, $x: 50%, $y: 50%) {
// <- meta.at-rule.mixin.scss meta.mixin.scss keyword.control.directive.mixin.scss punctuation.definition.keyword.scss
//^^^^^ meta.at-rule.mixin.scss meta.mixin.scss
//     ^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.mixin.identifier.scss
//                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.mixin.parameters.scss meta.group.scss
//                                           ^ meta.at-rule.mixin.scss - meta.block
//                                            ^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^ keyword.control.directive.mixin.scss
//     ^^^^^^^^^^^^ entity.name.mixin.scss
//                 ^ punctuation.section.group.begin.scss
//                  ^^^^^^ variable.parameter.scss
//                        ^ punctuation.separator.sequence.css
//                          ^^ variable.parameter.scss
//                            ^ punctuation.separator.key-value.css
//                              ^^^ meta.number.integer.decimal.css constant.numeric
//                                 ^ punctuation.separator.sequence.css
//                                   ^^ variable.parameter.scss
//                                     ^ punctuation.separator.key-value.css
//                                       ^^^ meta.number.integer.decimal.css constant.numeric
//                                          ^ punctuation.section.group.end.scss
//                                            ^ punctuation.section.block.begin.css

  text-indent: -99999em;
  overflow: hidden;
  text-align: left;

  background: {
    image: $image;
    repeat: no-repeat;
    position: $x $y;
  }
}

.mail-icon {
  @include replace-text(url("/images/mail.svg"), 0);
//^^^^^^^^^ meta.at-rule.include.scss - meta.mixin
//         ^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.scss
//                     ^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//                      ^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss meta.function-call.identifier.css
//                         ^^^^^^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss meta.function-call.arguments.css meta.group.css
//                                             ^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//                                                 ^ - meta.at-rule - meta.mixin - meta.group
//^ punctuation.definition.keyword.scss
//^^^^^^^^ keyword.control.directive.include.scss
//         ^^^^^^^^^^^^ variable.other.mixin.scss
//                     ^ punctuation.section.group.begin.scss
//                      ^^^ support.function.url.css
//                         ^ punctuation.section.group.begin.css
//                          ^^^^^^^^^^^^^^^^^^ meta.string.css string.quoted.double.css
//                                            ^ punctuation.section.group.end.css
//                                             ^ punctuation.separator.sequence.css
//                                               ^ meta.number.integer.decimal.css constant.numeric.value.css
//                                                ^ punctuation.section.group.end.scss
//                                                 ^ punctuation.terminator.rule.css
}

//=============================================================================
// At-Rules: mixin keyword arguments
// https://sass-lang.com/documentation/at-rules/mixin/#keyword-arguments
//=============================================================================
@mixin square($size, $radius: 0) {
  width: $size;
  height: $size;

  @if $radius != 0 {
    border-radius: $radius;
  }
}

.avatar {
  @include square(100px, $radius: 4px);
//^^^^^^^^^ meta.at-rule.include.scss
//         ^^^^^^ meta.at-rule.include.scss meta.mixin.scss
//               ^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//                                    ^ - meta.at-rule - meta.mixin - meta.group
//^ punctuation.definition.keyword.scss
//^^^^^^^^ keyword.control.directive.include.scss
//         ^^^^^^ variable.other.mixin.scss
//               ^ punctuation.section.group.begin.scss
//                ^^^^^ meta.number.integer.decimal.css constant.numeric
//                     ^ punctuation.separator.sequence.css
//                       ^^^^^^^ variable.parameter.scss
//                              ^ punctuation.separator.key-value.css
//                                ^^^ meta.number.integer.decimal.css constant.numeric
//                                   ^ punctuation.section.group.end.scss
//                                    ^ punctuation.terminator.rule.css
}

//=============================================================================
// At-Rules: mixin arbitrary arguments
// https://sass-lang.com/documentation/at-rules/mixin/#taking-arbitrary-arguments
//=============================================================================
@mixin order($height, $selectors...) {
// <- meta.at-rule.mixin.scss meta.mixin.scss keyword.control.directive.mixin.scss punctuation.definition.keyword.scss
//^^^^^ meta.at-rule.mixin.scss meta.mixin.scss
//     ^^^^^ meta.at-rule.mixin.scss meta.mixin.identifier.scss
//          ^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.mixin.parameters.scss meta.group.scss
//                                  ^ meta.at-rule.mixin.scss - meta.block
//                                   ^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css
//^^^^ keyword.control.directive.mixin.scss
//     ^^^^^ entity.name.mixin.scss
//          ^ punctuation.section.group.begin.scss
//           ^^^^^^^ variable.parameter.scss
//                  ^ punctuation.separator.sequence.css
//                    ^^^^^^^^^^ variable.parameter.scss
//                              ^^^ keyword.operator.variadic.scss
//                                 ^ punctuation.section.group.end.scss
//                                   ^ punctuation.section.block.begin.css

  @for $i from 0 to length($selectors) {
    #{nth($selectors, $i + 1)} {
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.property-list.css meta.block.css meta.property-list.css meta.block.css - meta.property-list meta.block meta.property-list meta.block meta.property-list meta.block
//                             ^^ meta.property-list.css meta.block.css meta.property-list.css meta.block.css meta.property-list.css meta.block.css
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.selector.css meta.interpolation.scss
//                            ^ meta.selector - meta.interpolation
//  ^ punctuation.definition.variable.scss
//   ^ punctuation.section.interpolation.begin.scss
//    ^^^ meta.function-call.identifier.css variable.function.css
//       ^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css
//       ^ punctuation.section.group.begin.css
//        ^^^^^^^^^^ variable.other.scss
//                  ^ punctuation.separator.sequence.css
//                    ^^ variable.other.scss
//                       ^ keyword.operator.arithmetic.scss
//                         ^ meta.number.integer.decimal.css constant.numeric.value.css
//                          ^ punctuation.section.group.end.css
//                           ^ punctuation.section.interpolation.end.scss
//                             ^ punctuation.section.block.begin.css
      position: absolute;
      height: $height;
      margin-top: $i * $height;
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.property-list.css meta.block.css meta.property-list.css meta.block.css meta.property-list.css meta.block.css
//    ^^^^^^^^^^ meta.property-name.css support.type.property-name.css
//              ^ punctuation.separator.key-value.css
//               ^^^^^^^^^^^^^ meta.property-value.css
//                ^^ variable.other.scss
//                   ^ keyword.operator.arithmetic.scss
//                     ^^^^^^^ variable.other.scss
//                            ^ punctuation.terminator.rule.css
    }
  }
}

@include order(150px, "input.name", "input.address", "input.zip");

// https://sass-lang.com/documentation/at-rules/mixin/#taking-arbitrary-keyword-arguments
@use "sass:meta";

@mixin syntax-colors($args...) {
//                        ^^^  keyword.operator.variadic.scss

@include syntax-colors(
  $string: #080,
//^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//^^^^^^^ variable.parameter.scss
//       ^ punctuation.separator.key-value.css
//         ^^^^ constant.other.color.rgb-value.css
//             ^ punctuation.separator.sequence.css
  $comment: #800,
//^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//^^^^^^^^ variable.parameter.scss
//        ^ punctuation.separator.key-value.css
//          ^^^^ constant.other.color.rgb-value.css
//              ^ punctuation.separator.sequence.css
  $variable: #60b,
//^^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//^^^^^^^^^ variable.parameter.scss
//         ^ punctuation.separator.key-value.css
//           ^^^^ constant.other.color.rgb-value.css
//               ^ punctuation.separator.sequence.css
)   // comment
// <- meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss punctuation.section.group.end.scss
//^^^^^^^^^^^^^ meta.at-rule.include.scss
//  ^^^^^^^^^^^ meta.block.css meta.at-rule.include.scss comment.line.double-slash.scss

// https://sass-lang.com/documentation/at-rules/mixin/#passing-arbitrary-arguments
@include order(150px, $form-selectors...);
//                                   ^^^  keyword.operator.variadic.scss
}

//=============================================================================
// At-Rules: mixin content blocks
// https://sass-lang.com/documentation/at-rules/mixin/#content-blocks
//=============================================================================
@mixin hover {
  &:not([disabled]):hover {
    @content;
// ^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css meta.property-list.css meta.block.css
//  ^^^^^^^^ meta.at-rule.content.scss meta.placeholder.scss
//          ^ - meta.at-rule.content - meta.placeholder
//  ^^^^^^^^ keyword.control.directive.content.scss
//  ^ punctuation.definition.keyword.scss
//          ^ punctuation.terminator.rule.css
  }
}

.button {
  border: 1px solid black;
  @include hover {
    border-width: 2px;
// ^^^^^^^^^^^^^^^^^^^ meta.property-list
//  ^^^^^^^^^^^^       support.type.property-name.css
//                ^^^  constant.numeric
//                   ^ punctuation.terminator.rule.css
  }
}

// https://sass-lang.com/documentation/at-rules/mixin/#passing-arguments-to-content-blocks
@mixin media($types...) {
  @each $type in $types {
    @media #{$type} {
      @content($type, value);
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css meta.property-list.css meta.block.css meta.at-rule.media.css meta.block.css
//    ^^^^^^^^ meta.at-rule.content.scss meta.placeholder.scss - meta.placeholder.arguments
//            ^^^^^^^^^^^^^^ meta.at-rule.content.scss meta.placeholder.arguments.scss
//                          ^ - meta.at-rule.content - meta.placeholder
//    ^ punctuation.definition.keyword.scss
//    ^^^^^^^^ keyword.control.directive.content.scss
//            ^ punctuation.section.group.begin.scss
//             ^^^^^ variable.other.scss
//                  ^ punctuation.separator.sequence.css
//                    ^^^^^ support.constant.property-value.css
//                         ^ punctuation.section.group.end.scss
//                          ^ punctuation.terminator.rule.css

      @content($type: $type, $arg2: value);
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.property-list
//    ^^^^^^^^ meta.at-rule.content.scss meta.placeholder.scss - meta.placeholder.arguments
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.content.scss meta.placeholder.arguments.scss
//                                        ^ - meta.at-rule.content - meta.placeholder
//    ^ punctuation.definition.keyword.scss
//    ^^^^^^^^ keyword.control.directive.content.scss
//            ^ punctuation.section.group.begin.scss
//             ^^^^^ variable.parameter.scss
//                  ^ punctuation.separator.key-value.css
//                    ^^^^^ variable.other.scss
//                         ^ punctuation.separator.sequence.css
//                           ^^^^^ variable.parameter.scss
//                                ^ punctuation.separator.key-value.css
//                                  ^^^^^ support.constant.property-value.css
//                                       ^ punctuation.section.group.end.scss
//                                        ^ punctuation.terminator.rule.css
    }
  }
}

@include media(screen, print) using ($type) {
// <- meta.at-rule.include.scss keyword.control.directive.include.scss punctuation.definition.keyword.scss
//^^^^^^^ meta.at-rule.include.scss - meta.mixin
//       ^^^^^ meta.at-rule.include.scss meta.mixin.scss
//            ^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.mixin.arguments.scss meta.group.scss
//                           ^ meta.at-rule.include.scss
//                            ^^^^^^ meta.at-rule.include.scss meta.using.scss
//                                  ^^^^^^^ meta.using.parameters.scss meta.group.scss
//                                         ^ meta.at-rule.include.scss - meta.at-rule meta.property-list
//                                          ^^ meta.at-rule.include.scss meta.property-list.css meta.block.css
//^^^^^^ keyword.control.directive.include.scss
//       ^^^^^ variable.other.mixin.scss
//            ^ punctuation.section.group.begin.scss
//             ^^^^^^ support.constant.property-value.css
//                   ^ punctuation.separator.sequence.css
//                     ^^^^^ support.constant.property-value.css
//                          ^ punctuation.section.group.end.scss
//                            ^^^^^ keyword.control.using.scss
//                                  ^ punctuation.section.group.begin.scss
//                                   ^^^^^ variable.parameter.scss
//                                        ^ punctuation.section.group.end.scss
//                                          ^ punctuation.section.block.begin.css

  h1 {
    font-size: 40px;
    @if $type == print {
// ^ meta.at-rule.include.scss meta.property-list.css meta.block.css meta.property-list.css meta.block.css
//  ^^^^^^^^^^^^^^^^^^^ meta.at-rule.include.scss meta.property-list.css meta.block.css meta.property-list.css meta.block.css meta.at-rule.conditional.scss
//                     ^^ meta.at-rule.include.scss meta.property-list.css meta.block.css meta.property-list.css meta.block.css meta.property-list.css meta.block.css
//  ^^^ keyword.control.conditional.if.scss
//      ^^^^^ variable.other.scss
//            ^^ keyword.operator.comparison.scss
//               ^^^^^ support.constant.property-value.css
//                     ^ punctuation.section.block.begin.css
      font-family: Calluna;
    }
  }
}
// <- meta.at-rule.include.scss meta.property-list.css meta.block.css punctuation.section.block.end.css
 // <- - meta.at-rule - meta.property-list - meta.block

//=============================================================================
// Function
// https://sass-lang.com/documentation/at-rules/function/
//=============================================================================
@function fibonacci($n) {
// <- meta.at-rule.function.scss meta.function.scss keyword.control.directive.function.scss punctuation.definition.keyword.scss
//^^^^^^^^ meta.at-rule.function.scss meta.function.scss
//        ^^^^^^^^^ meta.at-rule.function.scss meta.function.identifier.scss
//                 ^^^^ meta.at-rule.function.scss meta.function.parameters.scss meta.group.scss
//                     ^ meta.at-rule.function.scss - meta.block
//                      ^^ meta.at-rule.function.scss meta.property-list.css meta.block.css
//^^^^^^^ keyword.control.directive.function.scss
//        ^^^^^^^^^ entity.name.function.scss
//                 ^ punctuation.section.group.begin.scss
//                  ^^ variable.parameter.scss
//                    ^ punctuation.section.group.end.scss
//                      ^ punctuation.section.block.begin.css
  $sequence: 0 1;
  @for $_ from 1 through $n {
    $new: nth($sequence, length($sequence)) + nth($sequence, length($sequence) - 1);
    $sequence: append($sequence, $new);
  }
  @return nth($sequence, length($sequence));
}

.sidebar {
  float: left;
  margin-left: fibonacci(4) * 1px;
//             ^^^^^^^^^^^^ meta.property-value.css
//             ^^^^^^^^^    meta.function-call.identifier.css variable.function.css
//                      ^^^ meta.function-call.arguments
//                      ^   punctuation.section.group.begin
//                       ^  constant.numeric
//                        ^ punctuation.section.group.end
}

// https://sass-lang.com/documentation/at-rules/function/#optional-arguments
@function invert($color, $amount: 100%) {
// <- meta.at-rule.function.scss meta.function.scss keyword.control.directive.function.scss punctuation.definition.keyword.scss
//^^^^^^^^ meta.at-rule.function.scss meta.function.scss
//        ^^^^^^ meta.at-rule.function.scss meta.function.identifier.scss
//              ^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.function.scss meta.function.parameters.scss meta.group.scss
//                                     ^ meta.at-rule.function.scss - meta.block
//                                      ^^ meta.at-rule.function.scss meta.property-list.css meta.block.css
//^^^^^^^ keyword.control.directive.function.scss
//        ^^^^^^ entity.name.function.scss
//              ^ punctuation.section.group.begin.scss
//               ^^^^^^ variable.parameter.scss
//                     ^ punctuation.separator.sequence.css
//                       ^^^^^^^ variable.parameter.scss
//                              ^ punctuation.separator.key-value.css
//                                ^^^^ meta.number.integer.decimal.css constant.numeric
//                                    ^ punctuation.section.group.end.scss
//                                      ^ punctuation.section.block.begin.css
  $inverse: change-color($color, $hue: hue($color) + 180);
  @return mix($inverse, $color, $amount);
}

$primary-color: #036;
.header {
  background-color: invert($primary-color, 80%);
}

// https://sass-lang.com/documentation/at-rules/function/#keyword-arguments
$primary-color: #036;
.banner {
  background-color: $primary-color;
  color: scale-color($primary-color, $lightness: +40%);
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.property-value.css
//       ^^^^^^^^^^^                                   meta.function-call.identifier.css variable.function.css
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments
//                                                    ^ punctuation.terminator.rule.css
//                  ^   punctuation.section.group.begin
//                                                   ^ punctuation.section.group.end
//                    ^^^^^^^^^^^^                     variable.other.scss
//                   ^                                 punctuation.definition.variable.scss
//                                 ^                   punctuation.separator.sequence
//                                    ^^^^^^^^^        variable.other.scss
//                                   ^                 punctuation.definition.variable.scss
//                                             ^       punctuation.separator.key-value.css
//                                               ^^^^  meta.number
//                                               ^     keyword.operator
//                                                ^^^  constant.numeric
}

// https://sass-lang.com/documentation/at-rules/function/#taking-arbitrary-arguments
@function sum($numbers...) {
//                    ^^^ keyword.operator.variadic.scss
  $sum: 0;
  @each $number in $numbers {
    $sum: $sum + $number;
  }
  @return $sum;
}

.micro {
  width: sum(50px, 30px, 100px);
}

// https://sass-lang.com/documentation/at-rules/function/#passing-arbitrary-arguments
$widths: 50px, 30px, 100px;
.micro {
  width: min($widths...);
//                  ^^^ keyword.operator.variadic.scss
}

//=============================================================================
// Function: return
// https://sass-lang.com/documentation/at-rules/function/#return
//=============================================================================
@use "sass:string";

@function str-insert($string, $insert, $index) {
  // Avoid making new strings if we don't need to.
  @if string.length($string) == 0 {
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.conditional.scss
//    ^^^^^^^^^^^^^ meta.function-call.identifier.css
//                 ^^^^^^^^^ meta.function-call.arguments.css meta.group.css
//    ^^^^^^ variable.namespace.scss
//          ^ punctuation.accessor.dot.scss
//           ^^^^^^ support.function.scss
//                 ^ punctuation.section.group.begin.css
//                  ^^^^^^^ variable.other.scss
//                         ^ punctuation.section.group.end.css
//                           ^^ keyword.operator.comparison.scss
//                              ^ meta.number.integer.decimal.css constant.numeric.value.css
//                                ^ punctuation.section.block.begin.css
    @return $insert;
//  ^^^^^^^^^^^^^^^ meta.at-rule.return.scss
//  ^^^^^^^ keyword.control.flow.return.scss
//  ^ punctuation.definition.keyword.scss
//          ^^^^^^^ variable.other.scss
//          ^ punctuation.definition.variable.scss
//                 ^ punctuation.terminator.rule.css
  }

  $before: string.slice($string, 0, $index);
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.declaration.value.scss
//         ^^^^^^^^^^^^ meta.function-call.identifier.css
//                     ^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css
//         ^^^^^^ variable.namespace.scss
//               ^ punctuation.accessor.dot.scss
//                ^^^^^ support.function.scss
//                     ^ punctuation.section.group.begin.css
//                      ^^^^^^^ variable.other.scss
//                             ^ punctuation.separator.sequence.css
//                               ^ meta.number.integer.decimal.css constant.numeric.value.css
//                                ^ punctuation.separator.sequence.css
//                                  ^^^^^^ variable.other.scss
//                                        ^ punctuation.section.group.end.css

  $after: string.slice($string, $index);
  @return $before + $insert + $after;
}

//=============================================================================
// Other Functions
// https://sass-lang.com/documentation/at-rules/function/#other-functions
//=============================================================================
@debug var(--main-bg-color); // var(--main-bg-color)
// <- meta.at-rule.message.scss keyword.control.at-rule.debug.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.message.scss
//     ^^^ meta.function-call.identifier.css
//        ^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css
//^^^^ keyword.control.at-rule.debug.scss
//     ^^^ support.function.var.css
//        ^ punctuation.section.group.begin.css
//         ^^^^^^^^^^^^^^^ variable.other.custom-property.css
//                        ^ punctuation.section.group.end.css
//                         ^ punctuation.terminator.rule.css

$primary: #f2ece4;
$accent: #e1d7d2;
@debug radial-gradient($primary, $accent); // radial-gradient(#f2ece4, #e1d7d2)
// <- meta.at-rule.message.scss keyword.control.at-rule.debug.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.message.scss
//     ^^^^^^^^^^^^^^^ meta.function-call.identifier.css
//                    ^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css
//^^^^ keyword.control.at-rule.debug.scss
//     ^^^^^^^^^^^^^^^ support.function.gradient.css
//                    ^ punctuation.section.group.begin.css
//                     ^^^^^^^^ variable.other.scss
//                             ^ punctuation.separator.sequence.css
//                               ^^^^^^^ variable.other.scss
//                                      ^ punctuation.section.group.end.css
//                                       ^ punctuation.terminator.rule.css

//=============================================================================
// Extend
// https://sass-lang.com/documentation/at-rules/extend/
//=============================================================================
.error {
  border: 1px #f00;
  background-color: #fdd;

  &--serious {
//^^^^^^^^^^ meta.selector.css
//^          variable.language.parent.css
// ^^^^^^^^^ entity.other.attribute-name.css
    @extend .error;
//  ^^^^^^^^^^^^^^ meta.at-rule.extend.scss
//  ^^^^^^^        keyword.control.directive.extend.scss
//          ^^^^^^ meta.selector.css
//  ^              punctuation.definition.keyword.scss
//                ^ punctuation.terminator.rule.css
    border-width: 3px;
  }
}

// https://sass-lang.com/documentation/at-rules/extend/#placeholder-selectors
.alert:hover, %strong-alert {
//            ^^^^^^^^^^^^^ entity.other.attribute-name.class.css
//            ^             punctuation.definition.entity.placeholder.scss
  font-weight: bold;
}

%strong-alert:hover {
//^^^^^^^^^^^^^^^^^ meta.selector.css
//^^^^^^^^^^^       entity.other.attribute-name.class.css
//           ^      punctuation.definition.pseudo-class.css
//            ^^^^^ entity.other.pseudo-class.css
//<-                punctuation.definition.entity.placeholder.scss
  color: red;
}

// https://sass-lang.com/documentation/at-rules/extend/#extend-in-media
@media screen and (max-width: 600px) {
  .error--serious {
    @extend .error;
//  ^^^^^^^^^^^^^^ meta.at-rule.extend.scss
//  ^^^^^^^        keyword.control.directive.extend.scss
//          ^^^^^^ meta.selector.css
//  ^              punctuation.definition.keyword.scss
//                ^ punctuation.terminator.rule.css

  }
}

//=============================================================================
// Error
// https://sass-lang.com/documentation/at-rules/error/
//=============================================================================
@mixin reflexive-position($property, $value) {
  @if $property != left and $property != right {
    @error "Property #{$property} must be either left or right.";
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.message.scss
//  ^^^^^^ keyword.control.at-rule.error.scss
//         ^^^^^^^^^^ meta.string.css string.quoted.double.css
//                   ^^^^^^^^^^^^ meta.string.css meta.interpolation.scss
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.css string.quoted.double.css
  }
}

//=============================================================================
// Warn
// https://sass-lang.com/documentation/at-rules/warn/
//=============================================================================
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if not index($known-prefixes, $prefix) {
      @warn "Unknown prefix #{$prefix}.";
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.message.scss
//    ^^^^^ keyword.control.at-rule.warn.scss
//          ^^^^^^^^^^^^^^^^ meta.string.css string.quoted.double.css
//                          ^^^^^^^^^^ meta.string.css meta.interpolation.scss
//                                    ^^ meta.string.css string.quoted.double.css
    }
  }
}

//=============================================================================
// Debug
// https://sass-lang.com/documentation/at-rules/debug/
//=============================================================================
@mixin inset-divider-offset($offset, $padding) {
  $divider-offset: (2 * $padding) + $offset;
//                 ^^^^^^^^^^^^^^ meta.declaration.value.scss meta.group.scss
//                 ^              punctuation
//                              ^ punctuation
//                    ^           keyword.operator.arithmetic.scss
//                      ^^^^^^^^  variable.other

  @debug "divider offset: #{$divider-offset}";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.message.scss
//^^^^^^ keyword.control.at-rule.debug.scss
//       ^^^^^^^^^^^^^^^^^ meta.string.css string.quoted.double.css
//                        ^^^^^^^^^^^^^^^^^^ meta.string.css meta.interpolation.scss
//                                          ^ meta.string.css string.quoted.double.css
}

//=============================================================================
// At-root
// https://sass-lang.com/documentation/at-rules/at-root/
//=============================================================================
@mixin unify-parent($child) {
  @at-root #{selector.unify(&, $child)} {
//^^^^^^^^ meta.at-rule.root.scss
//        ^ meta.at-rule.root.scss meta.selector.css - meta.interpolation
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.root.scss meta.selector.css meta.interpolation.scss
//                                     ^ meta.at-rule.root.scss meta.selector.css - meta.interpolation
//^ punctuation.definition.keyword.scss
// ^^^^^^^ keyword.control.directive.root.scss
//         ^ punctuation.definition.variable.scss
//          ^ punctuation.section.interpolation.begin.scss
//           ^^^^^^^^ variable.namespace.scss
//                   ^ punctuation.accessor.dot.scss
//                    ^^^^^ support.function.scss
//                         ^ punctuation.section.group.begin.css
//                           ^ punctuation.separator.sequence.css
//                             ^^^^^^ variable.other.scss
//                                   ^ punctuation.section.group.end.css
//                                    ^ punctuation.section.interpolation.end.scss
    @content;
//  ^^^^^^^^ keyword.control.directive.content.scss
//  ^ punctuation.definition.keyword.scss
  }
}

// https://sass-lang.com/documentation/at-rules/at-root/#beyond-style-rules
@media print {
  .page {
    width: 8in;

    @at-root (without: media) {
//  ^^^^^^^^  meta.at-rule.root.scss - meta.selector
//          ^ meta.at-rule.media.css meta.selector.css - meta.group
//           ^^^^^^^^^^^^^^^^ meta.at-rule.root.scss meta.selector.css meta.group.scss
//                           ^ meta.at-rule.media.css meta.selector.css - meta.group
//  ^ punctuation.definition.keyword.scss
//  ^^^^^^^^ keyword.control.directive.root.scss
//           ^ punctuation.section.group.begin.scss
//            ^^^^^^^ keyword.control.scss
//                   ^ punctuation.separator.key-value.css
//                     ^^^^^ support.constant.property-value.css
//                          ^ punctuation.section.group.end.scss
      color: #111;
    }

    @at-root (with: rule) {
//  ^^^^^^^^  meta.at-rule.root.scss - meta.selector
//          ^ meta.at-rule.media.css meta.selector.css - meta.group
//           ^^^^^^^^^^^^ meta.at-rule.root.scss meta.selector.css meta.group.scss
//                       ^ meta.at-rule.media.css meta.selector.css - meta.group
//  ^ punctuation.definition.keyword.scss
//  ^^^^^^^^ keyword.control.directive.root.scss
//           ^ punctuation.section.group.begin.scss
//            ^^^^ keyword.control.scss
//                ^ punctuation.separator.key-value.css
//                  ^^^^ support.constant.property-value.css
//                      ^ punctuation.section.group.end.scss
      font-size: 1.2em;
    }
  }
}

//=============================================================================
// If, else
// https://sass-lang.com/documentation/at-rules/control/if/
//=============================================================================
@mixin avatar($size, $circle: false) {
  width: $size;
  height: $size;

  @if $circle {
//^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css meta.at-rule.conditional.scss
//^^^ keyword.control.conditional.if.scss
//^ punctuation.definition.keyword.scss
//    ^^^^^^^ variable.other
    border-radius: math.div($size, 2);
  }
}

// https://sass-lang.com/documentation/at-rules/control/if/#else
@mixin theme-colors($light-theme: true) {
  @if $light-theme {
//^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css meta.at-rule.conditional.scss
//^^^ keyword.control.conditional.if.scss
//^ punctuation.definition.keyword.scss
//    ^^^^^^^^^^^^ variable.other

    background-color: $light-background;
    color: $light-text;
  } @else {
//  ^^^^^ meta.at-rule.conditional.scss keyword.control.conditional.else.scss
//  ^ punctuation.definition.keyword.scss
//       ^ meta.at-rule.conditional.scss - keyword
    background-color: $dark-background;
    color: $dark-text;
  }
}

// https://sass-lang.com/documentation/at-rules/control/if/#else-if
@mixin triangle($size, $color, $direction) {

  @if $direction == up {
//^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.mixin.scss meta.property-list.css meta.block.css meta.at-rule.conditional.scss
//^^^ keyword.control.conditional.if.scss
//^ punctuation.definition.keyword.scss
//    ^^^^^^^^^^ variable.other
//               ^^ keyword.operator.comparison.scss
//                  ^^ support.constant.property-value.css
//                     ^ punctuation.section.block.begin.css
    border-bottom-color: $color;
  } @else if $direction == right {
//^^ - meta.at-rule.conditional
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.conditional.scss
//                               ^^ - meta.at-rule.conditional
//^ punctuation.section.block.end.css
//  ^^^^^^^^ keyword.control.conditional.elseif.scss
//  ^ punctuation.definition.keyword.scss
//           ^^^^^^^^^^ variable.other.scss
//                      ^^ keyword.operator.comparison.scss
//                         ^^^^^ support.constant.property-value.css
//                               ^ punctuation.section.block.begin.css
    border-left-color: $color;
  } @else if $direction == down {
//^^ - meta.at-rule.conditional
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.conditional.scss
//                              ^^ - meta.at-rule.conditional
//^ punctuation.section.block.end.css
//  ^^^^^^^^ keyword.control.conditional.elseif.scss
//  ^ punctuation.definition.keyword.scss
//           ^^^^^^^^^^ variable.other.scss
//                      ^^ keyword.operator.comparison.scss
//                         ^^^^ support.constant.property-value.css
//                              ^ punctuation.section.block.begin.css
    border-top-color: $color;
  } @else if $direction == left {
//^^ - meta.at-rule.conditional
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.conditional.scss
//                              ^^ - meta.at-rule.conditional
//^ punctuation.section.block.end.css
//  ^^^^^^^^ keyword.control.conditional.elseif.scss
//  ^ punctuation.definition.keyword.scss
//           ^^^^^^^^^^ variable.other.scss
//                      ^^ keyword.operator.comparison.scss
//                         ^^^^ support.constant.property-value.css
//                              ^ punctuation.section.block.begin.css
    border-right-color: $color;
  } @else {
//^^ - meta.at-rule.conditional
//  ^^^^^^ meta.at-rule.conditional.scss
//        ^^ - meta.at-rule.conditional
//^ punctuation.section.block.end.css
//  ^ punctuation.definition.keyword.scss
//  ^^^^^ keyword.control.conditional.else.scss
//        ^ punctuation.section.block.begin.css
    @error "Unknown direction #{$direction}.";
  }
}

//=============================================================================
// Each
// https://sass-lang.com/documentation/at-rules/control/each/
//=============================================================================
$sizes: 40px, 50px, 80px;

@each $size in $sizes {
// <- meta.at-rule.each.scss keyword.control.loop.each.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^ meta.at-rule.each.scss
//^^^ keyword.control.loop.each.scss
//    ^^^^^ variable.other.scss
//          ^^ keyword.operator.iteration.scss
//             ^^^^^ variable.other.scss
  .icon-#{$size} {
    font-size: $size;
    height: $size;
    width: $size;
  }
}

// https://sass-lang.com/documentation/at-rules/control/each/#with-maps
$icons: ("eye": "\f112", "start": "\f12e", "stop": "\f12f");
// ^^^ meta.declaration.identifier.scss variable.other.scss
//    ^ meta.declaration.scss punctuation.separator.key-value.css
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.declaration.value.scss
//      ^ meta.mapping.scss punctuation.section.mapping.begin.scss
//       ^^^^^ meta.mapping.key.scss meta.string.css string.quoted.double.css
//            ^ meta.mapping.scss punctuation.separator.key-value.css
//              ^^^^^^^ meta.mapping.value.scss meta.string.css string.quoted.double.css
//                     ^^ meta.mapping.scss
//                     ^ punctuation.separator.sequence.css
//                       ^^^^^^^ meta.mapping.key.scss meta.string.css string.quoted.double.css
//                              ^ meta.mapping.scss punctuation.separator.key-value.css
//                                ^^^^^^^ meta.mapping.value.scss meta.string.css string.quoted.double.css
//                                       ^^ meta.mapping.scss
//                                       ^  punctuation.separator.sequence.css
//                                         ^^^^^^ meta.mapping.key.scss meta.string.css string.quoted.double.css
//                                               ^ meta.mapping.scss punctuation.separator.key-value.css
//                                                 ^^^^^^^ meta.mapping.value.scss meta.string.css string.quoted.double.css
//                                                        ^ punctuation.section.mapping.end.scss
//                                                         ^ punctuation.terminator.rule.css
@each $name, $glyph in $icons {
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.each.scss
//^^^ keyword.control.loop.each.scss
//    ^^^^^ variable.other.scss
//         ^ punctuation.separator.sequence.css
//           ^^^^^ variable.other.scss
//                  ^^ keyword.operator.iteration.scss
//                     ^^^^^^ variable.other.scss
  .icon-#{$name}:before {
//               ^^^^^^ entity.other.pseudo-element.css
    display: inline-block;
    font-family: "Icon Font";
    content: $glyph;
  }
}

https://sass-lang.com/documentation/at-rules/control/each/#destructuring
$icons:
  "eye" "\f112" 12px,
  "start" "\f12e" 16px,
  "stop" "\f12f" 10px;

@each $name, $glyph, $size in $icons {
// <- meta.at-rule.each.scss keyword.control.loop.each.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.each.scss
//^^^ keyword.control.loop.each.scss
//    ^^^^^ variable.other.scss
//         ^ punctuation.separator.sequence.css
//           ^^^^^^ variable.other.scss
//                 ^ punctuation.separator.sequence.css
//                   ^^^^^ variable.other.scss
//                         ^^ keyword.operator.iteration.scss
//                            ^^^^^^ variable.other.scss
  .icon-#{$name}:before {
    display: inline-block;
    font-family: "Icon Font";
    content: $glyph;
    font-size: $size;
  }
}

//=============================================================================
// For
// https://sass-lang.com/documentation/at-rules/control/for/
//=============================================================================
$base-color: #036;

@for $i from 1 through 3 {
// <- meta.at-rule.for.scss keyword.control.loop.for.scss punctuation.definition.keyword.scss
//^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.for.scss
//^^ keyword.control.loop.for.scss
//   ^^ variable.other.scss
//      ^^^^ keyword.operator.iteration.scss
//           ^ constant.numeric
//             ^^^^^^^ keyword.operator.iteration.scss
//                     ^ constant.numeric
  ul:nth-child(3n + #{$i}) {
    background-color: lighten($base-color, $i * 5%);
  }
}

@use "sass:math";

//=============================================================================
// While
// https://sass-lang.com/documentation/at-rules/control/for/
//=============================================================================
/// Divides `$value` by `$ratio` until it's below `$base`.
@function scale-below($value, $base, $ratio: 1.618) {
  @while $value > $base {
//^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.while.scss
//^ punctuation.definition.keyword.scss
//^^^^^^ keyword.control.loop.while.scss
//       ^^^^^^ variable.other.scss
//              ^ keyword.operator.comparison.scss
//                ^^^^^ variable.other.scss
    $value: math.div($value, $ratio);
  }
  @return $value;
}

//=============================================================================
// CSS At-Rules
// https://sass-lang.com/documentation/at-rules/css/
//=============================================================================
$normal-font-size: 16px;
sup {
  font-size: scale-below(20px, 16px);
}

.print-only {
  display: none;

  @media print { display: block; }
//^^^^^^^^^^^^^ meta.at-rule.media.css
}

// https://sass-lang.com/documentation/at-rules/css/#media
$layout-breakpoint-small: 960px;

@media (min-width: $layout-breakpoint-small) {
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.media.css
//                 ^^^^^^^^^^^^^^^^^^^^^^^^   variable.other.scss
  .hide-extra-small {
    display: none;
  }
}

// https://sass-lang.com/documentation/at-rules/css/#supports
$position: sticky;
@mixin sticky-position {
  position: fixed;
  @supports (position: $position) {
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.at-rule.supports.css
//                     ^^^^^^^^^   variable.other.scss
    position: sticky;
  }
}

.banner {
  @include sticky-position;
}

//=============================================================================
// Numbers
// https://sass-lang.com/documentation/values/numbers/
//=============================================================================
@use 'sass:math';

$transition-speed: math.div(1s, 50px);

@mixin move($left-start, $left-stop) {
  position: absolute;
  left: $left-start;
  transition: left ($left-stop - $left-start) * $transition-speed;
//                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.group.scss
//                 ^                          punctuation.section.group.begin.scss
//                  ^^^^^^^^^^                variable.other.scss
//                             ^              keyword.operator.arithmetic.scss
//                               ^^^^^^^^^^   variable.other.scss
//                                          ^ punctuation.section.group.end.scss
  &:hover {
    left: $left-stop;
  }
}

.slider {
  @include move(10px, 120px);
}

//=============================================================================
// Operators
// https://sass-lang.com/documentation/operators/
//=============================================================================
@debug 1 + 2 * 3 == 1 + (2 * 3); // true
//                      ^^^^^^^ meta.group.scss
//                       ^      constant.numeric
//                         ^    keyword.operator
//                           ^  constant.numeric
@debug true or false and false == true or (false and false); // true
//     ^^^^                                                constant.language.boolean.true.scss
//          ^^                                             keyword.operator.logical.scss
//             ^^^^^                                       constant.language.boolean.false.scss
//                    ^^                                   keyword.operator.logical.scss
//                                        ^^^^^^^^^^^^^^^^ meta.group.scss
//                                         ^^^^            constant.language.boolean.false.scss
//                                               ^^^       keyword.operator.logical.scss
//                                                   ^^^^^ constant.language.boolean.false.scss
@debug (1 + 2) * 3; // 9
@debug ((1 + 2) * 3 + 4) * 5; // 65


//===========================================================================//
//                          Various other tests                              //
//===========================================================================//


//=============================================================================
// Expressions in font values
//=============================================================================
h2 {
  font-family: create_family($default, sans-serif, Times New Roman);
//             ^^^^^^^^^^^^^ meta.function-call.identifier.css variable.function.css
//                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.css meta.group.css
//                          ^ punctuation.section.group.begin.css
//                           ^^^^^^^^ variable.other.scss
//                                   ^ punctuation.separator.sequence.css
//                                     ^^^^^^^^^^ support.constant.property-value.css
//                                               ^ punctuation.separator.sequence.css
//                                                                ^ punctuation.section.group.end.css
 font-weight: 20px + ($large * 2);
//                   ^^^^^^^^^^^^ meta.group.scss
//                    ^^^^^^      variable.other.scss
//                           ^    keyword.operator
}

//=============================================================================
// Spaces in declarations
// https://github.com/braver/Sass/issues/99
//=============================================================================
$color1: #f00;
// ^^^^ meta.declaration.identifier.scss
$color2 : #f00;
// ^^^^ meta.declaration.identifier.scss
$color3     : #f00;
// ^^^^ meta.declaration.identifier.scss
